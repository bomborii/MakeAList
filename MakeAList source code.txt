//Joshua To
//December 22, 2018
//This program creates a list. The user can add or remove items from their list
//view them. The list leaves no gaps between items.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignment3
{
    class Program
    {
        //stores the user-inputted values
        static string[] values = new string[10];

        //stores the number of items on the list
        static int listSize;

        static void Main(string[] args)
        {
            //create a short intro list saying "Hello There"
            Add(1, "H");
            Add(2, "e");
            Add(3, "l");
            Add(4, "l");
            Add(5, "l");
            Console.WriteLine("Item removed: " + Remove(5));
            Add(6, "o");
            Add(6, " ");
            Add(7, "T");
            Add(8, "h");
            Add(9, "e");
            Add(10, "e");
            Add(10, "r");

            //print out if the list is empty or not (true if yes, false if no)
            Console.WriteLine(IsEmpty());

            //print out the entire list
            Console.WriteLine(GetList());

            //clear the list
            while (IsEmpty() == false)
            {
                Remove(1);
            }
            
            //whether the user is still using the program
            bool programActive = true;

            //stores the user inputted index that adds or removes a string
            int index;
            //stores the string the user inputs to the Add subprogram
            string addString;

            //prompt user to complete an action
            Console.WriteLine("Choose one of the following options:");
            Console.WriteLine("Press a to add something to your list");
            Console.WriteLine("Press b to remove something from your list");
            Console.WriteLine("Press c to print out your list");
            Console.WriteLine("Press d to exit program");
            //allow the user to keep performing actions until they press "d", which exits the loop
            while (programActive == true)
            {
                //saves the user's choice into a string
                string input = Console.ReadLine();

                if (input == "a")
                {
                    //print the list
                    Console.WriteLine(GetList());
                    //prompt to tell the user how to add an item to the list
                    Console.WriteLine("Enter the index you wish your item to be placed at.\r\nAfter pressing the enter key, input the item you want to add to your list.");
                    //save the index number into an integer
                    int.TryParse(Console.ReadLine(), out index);
                    //save the user inputted string into a string
                    addString = Console.ReadLine();
                    //add the item
                    Add(index, addString);
                    //print the new list
                    Console.WriteLine("\r\n" + GetList() + "\r\n");
                }
                else if (input == "b")
                {
                    //print the list
                    Console.WriteLine(GetList());
                    //tell the user how to remove an item
                    Console.Write("To remove something from your list, enter the index of the item that must be removed. \r\n");
                    //convert the index number into an integer
                    int.TryParse(Console.ReadLine(), out index);
                    //print out the string that was removed
                    Console.WriteLine(Remove(index) + " was removed.");
                    //print the new list
                    Console.WriteLine("\r\n" + GetList() + "\r\n");
                }
                else if (input == "c")
                {
                    //print the list
                    Console.WriteLine("\r\n" + GetList() + "\r\n");
                }
                else if (input == "d")
                {
                    //exit the program
                    programActive = false;
                }
                else
                {
                    //if the user did not choose a valid option, print "NOT AN OPTION"
                    Console.WriteLine("NOT AN OPTION");
                }
            }

        }
        //add something to the list
        static bool Add(int index, string str)
        {
            //if the index is less than the first spot on the list, return false
            if (index < 1)
            {
                return false;
            }
            //if the index is greater or equal to 1..
            else
            {
                //if the length of the values array equals the size of the list, resize to make it bigger
                if (values.Length == Size())
                {
                    ResizeBigger(ref values);
                }
                //if the index is greater than the list size, place the new item at the end of the list
                if (index > Size())
                {
                    values[Size()] = str;
                }
                //if the index is less than or equal to the size, shift all the other items right of the index 1 to the right
                else
                {
                    for (int i = Size(); i > index - 1; i--)
                    {
                        values[i] = values[i - 1];
                    }
                    values[index - 1] = str;
                }
                //increase list size by 1
                listSize++;
                //return true
                return true;
            }
            
        }
        //Remove the item at the given index
        static string Remove(int index)
        {
            
            
            //if the index is between 1 and the list size, remove the designated string
            //and return it
            if (index >= 1 && index <= Size())
            {
                //local variable to store the string to be removed
                string storeRemoveString = Get(index);

                index = index - 1;
                //clear the list item
                values[index] = null;
                
                //shift all items to the left
                for (int i = index; i < Size(); i++ )
                {
                    values[i] = values[i + 1];
                }
                //if the gap between the values length and list size is 8 or greater, resize the values array 5 smaller
                while (Size() <= values.Length - 8)
                {
                    ResizeSmaller(ref values);
                }
                //decrease list size by one
                listSize--;
                //return the removed string
                return storeRemoveString;
            }
            //if not, return null
            else
            {
                return null;
            }
        }
        //Return true if the list is empty, and false if not
        static bool IsEmpty()
        {
            if (Size() == 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        //Get the string at the given index
        static string Get(int index)
        {
            return values[index];
        }
        //Return the number of items in the list
        static int Size()
        {
            return listSize;
        }
        //Resize the string array parameter to be 5 bigger than what it was previously
        //Return the new size of the array
        static int ResizeBigger(ref string[] str)
        {
            //resize the temporary array to five greater than the original array
            string[] temporaryArray = new string[str.Length + 5];

            //copy the items from the temporary array to the original reference array
            for (int i = 0; i < str.Length; i++)
            {
                temporaryArray[i] = str[i];
            }
            str = temporaryArray;

            //return the length of the resized array
            return str.Length;

        }
        //Resize the string array parameter to be 5 smaller than what it was previously
        //Return the new size of the array
        static int ResizeSmaller(ref string[] str)
        {
            //resize the temporary array to five less than the original array
            string[] temporaryArray = new string[str.Length - 5];

            //copy the items from the temporary array to the original reference array
            for (int i = 0; i < temporaryArray.Length; i++)
            {
                temporaryArray[i] = str[i];
            }
            str = temporaryArray;

            //return the length of the resized array
            return str.Length;
        }
        //Return the entire list as one big string
        static string GetList()
        {
            //creates a temporary string to hold the list
            //make the string empty
            string list = "";
            //create a for loop to cycle through all the array values
            for (int i = 0; i < values.Length; i++)
            {
                //on every line of the list, print the index plus one (so that the first index is 1 not 0)
                //and the actual value of the array of that index separated by a space
                //separate each line by a \r\n
                list = list + (i + 1) + " " + values[i] + "\r\n";
            }
            //return the entire list as a string
            return list;
        }
    }
}
